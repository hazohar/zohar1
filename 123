// הקוד הקבוע שלך מהחלק העליון של הסקריפט, עד למשתנים
const CHUMASHIM = [
    {key:'bereishit',title:'בראשית',parshiot:['בראשית','נח','לך לך','וירא','חיי שרה','תולדות','ויצא','וישלח','וישב','מקץ','ויגש','ויחי']},
    {key:'shemot',title:'שמות',parshiot:['שמות','וארא','בא','בשלח','יתרו','משפטים','תרומה','תצוה','כי תשא','ויקהל','פקודי']},
    {key:'vayikra',title:'ויקרא',parshiot:['ויקרא','צו','שמיני','תזריע','מצורע','אחרי מות','קדושים','אמור','בהר','בחוקותי']},
    {key:'bamidbar',title:'במדבר',parshiot:['במדבר','בהעלתך','שלח','קרח','חוקת','בלק','פנחס','מטות','מסעי']},
    {key:'devarim',title:'דברים',parshiot:['דברים','ואתחנן','עקב','ראה','שופטים','כי תצא','כי תבוא','נצבים','וילך','האזינו','וזאת הברכה']}
];
const COMMENTATORS = ['אור יקר','גליון מאור החמה','גליונות (ילקוט הערות)','הגהות הגר"א','הגהות רח"ו (לרח"ו האמיתי)','הגהות הרמ"ז','זוהר +ניקוד +שנו"ס','זוהר אור יקר','זוהר הרקיע','יהל אור','יודעי בינה','כתם פז','מסורת הזוהר','מקדש מלך','נזר ישראל','קרני אור','רא"ג מאור החמה','רח"ו מאור החמה','רמ"א','רמ"ז','רמ"ק','מאור החמה','רמד"ל','רממ משקלוב','שמן ששון','שער מאמרי רשב"י','שעת רצון','תורה אור'];
const STATUS_OPTIONS = [
    { key: 'none', text: 'אין בכלל', color: 'var(--status-none)' },
    { key: 'text', text: 'טקסט', color: 'var(--status-text)' },
    { key: 'proofread', text: 'הגהה', color: 'var(--status-proofread)' },
    { key: 'edit', text: 'עריכה', color: 'var(--status-edit)' },
    { key: 'review', text: 'ביקורת', color: 'var(--status-review)' },
    { key: 'ready', text: 'מוכן לעימוד', color: 'var(--status-ready)' }
];
const COMMENTATOR_DRIVE_LINKS = {
    'אור יקר': '#', // החלף בקישור האמיתי שלך
    'גליון מאור החמה': '#',
    'גליונות (ילקוט הערות)': '#',
    'הגהות הגר"א': '#',
    'הגהות רח"ו (לרח"ו האמיתי)': '#',
    'הגהות הרמ"ז': '#',
    'זוהר +ניקוד +שנו"ס': '#',
    'זוהר אור יקר': '#',
    'זוהר הרקיע': '#',
    'יהל אור': '#',
    'יודעי בינה': '#',
    'כתם פז': '#',
    'מסורת הזוהר': '#',
    'מקדש מלך': '#',
    'נזר ישראל': '#',
    'קרני אור': '#',
    'רא"ג מאור החמה': '#',
    'רח"ו מאור החמה': '#',
    'רמ"א': '#',
    'רמ"ז': '#',
    'רמ"ק': '#',
    'מאור החמה': '#',
    'רמד"ל': '#',
    'רממ משקלוב': '#',
    'שמן ששון': '#',
    'שער מאמרי רשב"י': '#',
    'שעת רצון': '#',
    'תורה אור': '#'
};

// משתנים ופונקציות כמו בקוד שלך, החל מ-navList ועד ה-init
const navList=document.getElementById('navList');
const sidebarTitle=document.getElementById('sidebarTitle');
const commentatorListEl=document.getElementById('commentatorList');
const sideTitle=document.getElementById('sideTitle');
const editorArea=document.getElementById('editorArea');
const editorCommentator=document.getElementById('editorCommentator');
const editorText=document.getElementById('editorText');
const saveBtn=document.getElementById('saveBtn');
const clearBtn=document.getElementById('clearBtn');
const contentDisplay=document.getElementById('contentDisplay');
let current={chumash:null,parsha:null,commentator:null};

function init(){
    // אם ה-Local Storage ריק, נסה לטעון את הנתונים מהקובץ החיצוני
    if (Object.keys(localStorage).length === 0) {
        loadDataFromJSON();
    } else {
        renderChumashList();
    }
}

async function loadDataFromJSON() {
    try {
        const response = await fetch('./DATA.json'); // הנתיב הזה פועל כי הקובץ נמצא באותו מקום כמו קובץ ה-HTML
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();

        // שמור את הנתונים ב-Local Storage
        for(let key in data) {
            localStorage.setItem(key, data[key]);
        }

        alert('נתונים נטענו בהצלחה מקובץ DATA.json');
        renderChumashList(); // הצג את הממשק רק לאחר הטעינה
    } catch (error) {
        console.error('Failed to load data from JSON:', error);
        alert('שגיאה בטעינת הקובץ החיצוני. טוען את הממשק ריק.');
        renderChumashList();
    }
}

function renderChumashList(){
    sidebarTitle.textContent='חומשים';
    navList.innerHTML='';
    CHUMASHIM.forEach(c=>{
        let a=document.createElement('a');
        a.className='chumash';
        a.textContent=c.title;
        a.onclick=e=>{e.preventDefault();openChumash(c)};
        navList.appendChild(a);
    });
    renderContent(null, null);
}
function openChumash(c){
    current.chumash=c.key;current.parsha=null;
    sidebarTitle.textContent=c.title;
    navList.innerHTML='';

    let backBtn = document.createElement('button');
    backBtn.textContent = 'חזרה לחומשים';
    backBtn.className = 'muted-btn back-btn';
    backBtn.onclick = renderChumashList;
    navList.appendChild(backBtn);

    c.parshiot.forEach(p=>{
        let a=document.createElement('a');
        a.className='parsha';
        a.textContent=p;
        a.onclick=e=>{e.preventDefault();openParsha(p)};
        navList.appendChild(a);
    });
    commentatorListEl.innerHTML='';
    sideTitle.textContent='בחר פרשה ומפרש';
    editorArea.style.display='none';
    renderContent(null, null);
}
function openParsha(p){
    current.parsha=p;
    sideTitle.textContent=`פרשה: ${p}`;
    commentatorListEl.innerHTML='';
    let ul=document.createElement('ul');
    COMMENTATORS.forEach(n=>{
        let li=document.createElement('li');

        let nameWrapper = document.createElement('div');
        nameWrapper.className = 'commentator-name-wrapper';

        let span=document.createElement('span');
        span.textContent=n;
        if (n.length > 20) {
            span.classList.add('is-small-font');
        }

        const driveLink = COMMENTATOR_DRIVE_LINKS[n];
        if (driveLink) {
            const linkEl = document.createElement('a');
            linkEl.href = driveLink;
            linkEl.target = '_blank';
            linkEl.rel = 'noopener noreferrer';
            linkEl.innerHTML = '📂';
            nameWrapper.appendChild(span);
            nameWrapper.appendChild(linkEl);
        } else {
            nameWrapper.appendChild(span);
        }

        let buttonsDiv = document.createElement('div');
        buttonsDiv.className = 'buttons';

        let editBtn=document.createElement('button');
        editBtn.textContent='ערוך';
        editBtn.onclick=e=>{e.stopPropagation();openEditor(n)};

        let statusBtn=document.createElement('button');
        statusBtn.textContent='בחר מצב';
        statusBtn.onclick=e=>{e.stopPropagation();openStatusSelector(n, statusBtn)};

        buttonsDiv.appendChild(editBtn);
        buttonsDiv.appendChild(statusBtn);

        let statusDiv = document.createElement('div');
        statusDiv.className = 'status-display';
        li.appendChild(nameWrapper);
        li.appendChild(statusDiv);
        li.appendChild(buttonsDiv);
        ul.appendChild(li);

        loadAndDisplayStatus(current.chumash, current.parsha, n, statusDiv);
    });
    commentatorListEl.appendChild(ul);
    editorArea.style.display='none';
    renderContent(current.chumash, current.parsha);
}

function loadAndDisplayStatus(chumashKey, parshaName, commentatorName, element) {
    const statusKey = `torah::${chumashKey}::${parshaName}::${commentatorName}::status`;
    const savedStatusKey = localStorage.getItem(statusKey);
    if (savedStatusKey) {
        const status = STATUS_OPTIONS.find(s => s.key === savedStatusKey);
        if (status) {
            element.innerHTML = `<span class="status-label" style="background-color: ${status.color};">${status.text}</span>`;
        }
    } else {
        element.innerHTML = `<span class="status-label" style="background-color: var(--status-none);">${STATUS_OPTIONS[0].text}</span>`;
    }
}

function openStatusSelector(commentator, button) {
    document.querySelectorAll('.status-dropdown').forEach(d => d.remove());
    const dropdown = document.createElement('div');
    dropdown.className = 'status-dropdown';

    STATUS_OPTIONS.forEach(status => {
        const statusOptionBtn = document.createElement('button');
        statusOptionBtn.textContent = status.text;
        statusOptionBtn.onclick = (e) => {
            e.stopPropagation();
            saveStatus(commentator, status.key);
            dropdown.remove();
        };
        dropdown.appendChild(statusOptionBtn);
    });

    button.parentElement.style.position = 'relative';
    button.parentElement.appendChild(dropdown);
}

function saveStatus(commentator, statusKey) {
    const key = `torah::${current.chumash}::${current.parsha}::${commentator}::status`;
    localStorage.setItem(key, statusKey);
    openParsha(current.parsha);
}

function storageKey(c,p,n){return `torah::${c}::${p}::${n}`}
function openEditor(n){
    if(!current.parsha){alert('בחר פרשה');return}
    current.commentator=n;
    editorCommentator.textContent=n;
    editorArea.style.display='flex';
    let k=storageKey(current.chumash,current.parsha,n);
    editorText.value=localStorage.getItem(k)||'';
}
saveBtn.onclick=()=>{
    if(!current.commentator)return;
    let k=storageKey(current.chumash,current.parsha,current.commentator);
    localStorage.setItem(k,editorText.value);
    renderContent(current.chumash, current.parsha);
};
clearBtn.onclick=()=>{
    if(!current.commentator)return;
    if(!confirm('למחוק את התוכן?'))return;
    let k=storageKey(current.chumash,current.parsha,current.commentator);
    localStorage.removeItem(k);
    saveStatus(current.commentator, 'none');
    renderContent(current.chumash, current.parsha);
};

function deleteCommentator(chumash, parsha, commentator) {
    if(!confirm(`האם אתה בטוח שברצונך למחוק את כל התוכן והסטטוס עבור ${commentator} בפרשת ${parsha}?`)) return;

    const contentKey = `torah::${chumash}::${parsha}::${commentator}`;
    const statusKey = `${contentKey}::status`;

    localStorage.removeItem(contentKey);
    localStorage.removeItem(statusKey);

    renderContent(current.chumash, current.parsha);
    openParsha(current.parsha);
    alert('התוכן נמחק בהצלחה!');
}

function resetAllData() {
    if (confirm('האם אתה בטוח לחלוטין שברצונך למחוק את כל הנתונים השמורים? פעולה זו היא בלתי הפיכה!')) {
        localStorage.clear();
        current = {chumash: null, parsha: null, commentator: null};
        renderChumashList();
        editorArea.style.display='none';
        alert('כל הנתונים נמחקו בהצלחה. האתר אופס.');
    }
}

document.getElementById('resetAll').onclick = resetAllData;

function renderContent(chumashKey, parshaName){
    contentDisplay.innerHTML='';
    const keys = Object.keys(localStorage);
    keys.forEach(k => {
        if(k.startsWith('torah::') && !k.endsWith('::status')){
            let [_,ch,p,n]=k.split('::');
            if ((!chumashKey || ch === chumashKey) && (!parshaName || p === parshaName)) {
                let v=localStorage.getItem(k);
                if(v){
                    let card=document.createElement('div');
                    card.className='content-card';

                    const statusKey = `torah::${ch}::${p}::${n}::status`;
                    const savedStatusKey = localStorage.getItem(statusKey) || 'none';
                    const status = STATUS_OPTIONS.find(s => s.key === savedStatusKey);
                    const statusHtml = status ? `<span class="status-label" style="background-color: ${status.color};">${status.text}</span>` : '';

                    card.innerHTML=`<h4>${ch} — ${p} — ${n} ${statusHtml}</h4><p>${v}</p>`;

                    let actionsDiv = document.createElement('div');
                    actionsDiv.className = 'content-card-actions';

                    let editBtn = document.createElement('button');
                    editBtn.textContent = 'ערוך';
                    editBtn.onclick = () => {
                        current.chumash = ch;
                        current.parsha = p;
                        openEditor(n);
                    };

                    let deleteBtn = document.createElement('button');
                    deleteBtn.className = 'delete-btn';
                    deleteBtn.textContent = 'מחק';
                    deleteBtn.onclick = () => {
                        deleteCommentator(ch, p, n);
                    };

                    actionsDiv.appendChild(editBtn);
                    actionsDiv.appendChild(deleteBtn);
                    card.appendChild(actionsDiv);

                    contentDisplay.appendChild(card);
                }
            }
        }
    });
}
document.getElementById('exportAll').onclick=()=>{
    let d={};
    for(let i=0;i<localStorage.length;i++){
        let k=localStorage.key(i);
        if(k.startsWith('torah::'))d[k]=localStorage.getItem(k);
    }
    let blob=new Blob([JSON.stringify(d,null,2)],{type:'application/json'});
    let url=URL.createObjectURL(blob);
    let a=document.createElement('a');
    a.href=url;a.download='torah-backup.json';a.click();URL.revokeObjectURL(url);
};
document.getElementById('importBtn').onclick=()=>document.getElementById('importFile').click();
document.getElementById('importFile').onchange=function(){
    let f=this.files[0];if(!f)return;
    let r=new FileReader();
    r.onload=e=>{
        try{let o=JSON.parse(e.target.result);
            for(let k in o){if(k.startsWith('torah::'))localStorage.setItem(k,o[k])}
            renderContent(current.chumash, current.parsha);
            if (current.parsha) {
                openParsha(current.parsha);
            } else {
                renderChumashList();
            }
            alert('הייבוא הצליח')}
        catch{alert('קובץ לא תקין')}};
    r.readAsText(f,'utf-8')};
init();
